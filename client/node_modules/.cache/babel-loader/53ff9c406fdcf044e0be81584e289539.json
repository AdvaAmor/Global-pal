{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_GROUPS, GROUP_ERROR, GET_GROUP, CREATE_GROUP_SUCCESS, CREATE_GROUP_FAIL, DELETE_GROUP, UPDATE_GROUP_FOLLOWER, GROUP_FOLLOWER_ERROR } from './types'; // Get all groups of the user\n\nexport const getMyGroups = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/groups/myGroup');\n    dispatch({\n      type: GET_GROUPS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GROUP_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all groups\n\nexport const getGroups = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/groups');\n    dispatch({\n      type: GET_GROUPS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GROUP_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get a groups by a given id \n\nexport const getGroupById = groupId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/groups/${groupId}`);\n    dispatch({\n      type: GET_GROUP,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GROUP_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // create new group\n\nexport const newGroup = ({\n  name,\n  subject,\n  about\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    subject,\n    about\n  });\n\n  try {\n    const res = await axios.post('/api/groups', body, config);\n    dispatch({\n      type: CREATE_GROUP_SUCCESS,\n      payload: res.data // its the new group \n\n    });\n    dispatch(setAlert('group created', 'success'));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CREATE_GROUP_FAIL\n    });\n  }\n}; // Delete group\n\nexport const deleteGroup = id => async dispatch => {\n  try {\n    await axios.delete(`/api/groups/${id}`);\n    dispatch({\n      type: DELETE_GROUP,\n      payload: id\n    });\n    dispatch(setAlert('Group Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: GROUP_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //addGroupFollower\n\nexport const addGroupFollower = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/profile/addFollowingGroup/${id}`);\n    dispatch({\n      type: UPDATE_GROUP_FOLLOWER,\n      payload: {\n        id,\n        followers: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GROUP_FOLLOWER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // removeGroupFollower\n\nexport const removeGroupFollower = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/profile/removeFollowingGroup/${id}`);\n    dispatch({\n      type: UPDATE_GROUP_FOLLOWER,\n      payload: {\n        id,\n        followers: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GROUP_FOLLOWER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/finalproject__adva_sapir/myProject/client/src/actions/group.js"],"names":["axios","setAlert","GET_GROUPS","GROUP_ERROR","GET_GROUP","CREATE_GROUP_SUCCESS","CREATE_GROUP_FAIL","DELETE_GROUP","UPDATE_GROUP_FOLLOWER","GROUP_FOLLOWER_ERROR","getMyGroups","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getGroups","getGroupById","groupId","newGroup","name","subject","about","config","headers","body","JSON","stringify","post","errors","forEach","error","deleteGroup","id","delete","addGroupFollower","put","followers","removeGroupFollower"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  GET_GROUPS,\r\n  GROUP_ERROR,\r\n  GET_GROUP,\r\n  CREATE_GROUP_SUCCESS,\r\n  CREATE_GROUP_FAIL,\r\n  DELETE_GROUP,\r\n  UPDATE_GROUP_FOLLOWER,\r\n  GROUP_FOLLOWER_ERROR\r\n\r\n\r\n} from './types';\r\n\r\n// Get all groups of the user\r\nexport const getMyGroups = () => async dispatch => {\r\n       \r\n   try {\r\n       \r\n       const res = await axios.get('/api/groups/myGroup');\r\n       \r\n   dispatch({\r\n     type: GET_GROUPS,\r\n     payload: res.data\r\n   });\r\n } catch (err) {\r\n   \r\n   dispatch({\r\n     type: GROUP_ERROR,\r\n     payload: { msg: err.response.statusText, status: err.response.status }\r\n   });\r\n }\r\n};\r\n\r\n\r\n\r\n// Get all groups\r\nexport const getGroups = () => async dispatch => {\r\n       \r\n  try {\r\n      const res = await axios.get('/api/groups');\r\n  dispatch({\r\n    type: GET_GROUPS,\r\n    payload: res.data\r\n  });\r\n} catch (err) {\r\n  \r\n  dispatch({\r\n    type: GROUP_ERROR,\r\n    payload: { msg: err.response.statusText, status: err.response.status }\r\n  });\r\n}\r\n};\r\n\r\n\r\n// Get a groups by a given id \r\nexport const getGroupById = (groupId) => async dispatch => {\r\n       \r\n    try {\r\n        \r\n        const res = await axios.get(`/api/groups/${groupId}`);\r\n        \r\n    dispatch({\r\n      type: GET_GROUP,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    \r\n    dispatch({\r\n      type: GROUP_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n };\r\n\r\n \r\n// create new group\r\nexport const newGroup = ({name,subject,about}) => async dispatch => {\r\n  const config = {\r\n      headers:{\r\n          'Content-Type':'application/json'\r\n      }\r\n  }\r\n  const body = JSON.stringify({name,subject,about});\r\n  try{\r\n      const res =  await axios.post('/api/groups',body,config);\r\n      dispatch({\r\n          type: CREATE_GROUP_SUCCESS,\r\n          payload: res.data // its the new group \r\n      });\r\n      dispatch(setAlert('group created', 'success')); \r\n  }\r\n  catch(err){\r\n      const errors = err.response.data.errors;\r\n      if(errors){\r\n          errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));  \r\n      }\r\n\r\n      dispatch({\r\n          type: CREATE_GROUP_FAIL\r\n      });\r\n\r\n  }\r\n}\r\n\r\n// Delete group\r\nexport const deleteGroup = id => async dispatch => {\r\n  try {\r\n    await axios.delete(`/api/groups/${id}`);\r\n\r\n    dispatch({\r\n      type: DELETE_GROUP,\r\n      payload: id\r\n    });\r\n\r\n    dispatch(setAlert('Group Removed', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GROUP_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n\r\n//addGroupFollower\r\nexport const addGroupFollower = id => async dispatch => {\r\n  try {\r\n    const res = await axios.put(`/api/profile/addFollowingGroup/${id}`);\r\n\r\n    dispatch({\r\n      type: UPDATE_GROUP_FOLLOWER,\r\n      payload: { id, followers: res.data }\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GROUP_FOLLOWER_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n\r\n// removeGroupFollower\r\nexport const removeGroupFollower = id => async dispatch => {\r\n  try {\r\n    const res = await axios.put(`/api/profile/removeFollowingGroup/${id}`);\r\n\r\n    dispatch({\r\n      type: UPDATE_GROUP_FOLLOWER,\r\n      payload: {id, followers: res.data }\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GROUP_FOLLOWER_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}