{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\finalproject__adva_sapir\\\\FinalProject\\\\Global-pal\\\\client\\\\src\\\\components\\\\chatOnline\\\\ChatOnline.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { useEffect, useState } from \"react\";\nimport \"./chatOnline.css\";\nimport { getFriends } from '../../actions/profile';\nimport avatar from \"../../img/avatar.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatOnline = ({\n  getFriends,\n  profile: {\n    friends,\n    loading\n  },\n  onlineUsers,\n  currentId,\n  setCurrentChat\n}) => {\n  _s();\n\n  //const [friends, setFriends] = useState([]);\n  const [onlineFriends, setOnlineFriends] = useState([]);\n  const [NOTonlineFriends, setNOTOnlineFriends] = useState([]);\n  useEffect(() => {\n    getFriends();\n  }, [currentId]);\n  useEffect(() => {\n    setOnlineFriends(friends.filter(f => onlineUsers.some(ou => ou.userId === f.user._id)));\n    setNOTOnlineFriends(friends.filter(f => !onlineUsers.some(ou => ou.userId === f.user._id)));\n  }, [friends, onlineUsers]);\n\n  const handleClick = async user => {\n    try {\n      const res = await axios.get(`/api/conversations/find/${currentId}/${user._id}`);\n\n      if (res.data !== null) {\n        setCurrentChat(res.data);\n      } // if there isnt already conversation between this 2 users , we create \n      //a new conversation between them.\n      else {\n          const config = {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          };\n          const body = {\n            \"senderId\": currentId,\n            \"receiverId\": user._id\n          };\n          const res = await axios.post(`/api/conversations/`, body, config);\n          setCurrentChat(res.data);\n        }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatOnline\",\n    children: [onlineFriends.map(o => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatOnlineFriend\",\n      onClick: () => handleClick(o.user),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatOnlineImgContainer\",\n        children: [o.photo ? /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"chatOnlineImg\",\n          src: `/uploads/${o.photo}`,\n          alt: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"chatOnlineImg\",\n          src: avatar,\n          alt: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatOnlineBadge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chatOnlineName\",\n        children: o === null || o === void 0 ? void 0 : o.user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, o._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this)), NOTonlineFriends.map(o => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatOnlineFriend\",\n      onClick: () => handleClick(o.user),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatOnlineImgContainer\",\n        children: [o.photo ? /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"chatOnlineImg\",\n          src: `/uploads/${o.photo}`,\n          alt: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"chatOnlineImg\",\n          src: avatar,\n          alt: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatOnlineBadgeOff\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chatOnlineName\",\n        children: o === null || o === void 0 ? void 0 : o.user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this)]\n    }, o._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatOnline, \"ERgYLeCeYvyv3J5TkJHwkeZJN9U=\");\n\n_c = ChatOnline;\nChatOnline.propTypes = {\n  getFriends: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getFriends\n})(ChatOnline);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatOnline\");","map":{"version":3,"sources":["C:/Users/User/Desktop/finalproject__adva_sapir/FinalProject/Global-pal/client/src/components/chatOnline/ChatOnline.js"],"names":["axios","PropTypes","connect","useEffect","useState","getFriends","avatar","ChatOnline","profile","friends","loading","onlineUsers","currentId","setCurrentChat","onlineFriends","setOnlineFriends","NOTonlineFriends","setNOTOnlineFriends","filter","f","some","ou","userId","user","_id","handleClick","res","get","data","config","headers","body","post","err","console","log","map","o","photo","name","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./chatOnline.css\";\r\nimport { getFriends } from '../../actions/profile';\r\nimport avatar from \"../../img/avatar.jpg\";\r\n\r\n\r\nconst ChatOnline = ({ getFriends, profile: { friends, loading }, onlineUsers, currentId, setCurrentChat }) => {\r\n\r\n    //const [friends, setFriends] = useState([]);\r\n    const [onlineFriends, setOnlineFriends] = useState([]);\r\n    const [NOTonlineFriends, setNOTOnlineFriends] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getFriends();\r\n    }, [currentId]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setOnlineFriends(friends.filter((f) => onlineUsers.some((ou) => ou.userId === f.user._id)));\r\n        setNOTOnlineFriends(friends.filter((f) => !onlineUsers.some((ou) => ou.userId === f.user._id)));\r\n\r\n    }, [friends, onlineUsers]);\r\n\r\n\r\n    const handleClick = async (user) => {\r\n        try {\r\n            const res = await axios.get(\r\n                `/api/conversations/find/${currentId}/${user._id}`\r\n            );\r\n\r\n            if (res.data !== null) {\r\n                setCurrentChat(res.data);\r\n            }\r\n\r\n            // if there isnt already conversation between this 2 users , we create \r\n            //a new conversation between them.\r\n            else {\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                }\r\n\r\n                const body = {\r\n                    \"senderId\": currentId,\r\n                    \"receiverId\": user._id\r\n                }\r\n                const res = await axios.post(`/api/conversations/`, body, config);\r\n\r\n                setCurrentChat(res.data);\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"chatOnline\">\r\n            {onlineFriends.map((o) => (\r\n                <div className=\"chatOnlineFriend\" key={o._id} onClick={() => handleClick(o.user)}>\r\n                    <div className=\"chatOnlineImgContainer\">\r\n                        {o.photo ? (\r\n                            <img\r\n                                className=\"chatOnlineImg\"\r\n                                src={`/uploads/${o.photo}`}\r\n                                alt=\"...\"\r\n                            />) : (<img\r\n                                className=\"chatOnlineImg\"\r\n                                src={avatar}\r\n                                alt=\"...\"\r\n                            />)\r\n                        }\r\n                        <div className=\"chatOnlineBadge\"></div>\r\n                    </div>\r\n                    <span className=\"chatOnlineName\">{o?.user.name}</span>\r\n                </div>\r\n            ))}\r\n\r\n\r\n            {NOTonlineFriends.map((o) => (\r\n                <div className=\"chatOnlineFriend\" key={o._id} onClick={() => handleClick(o.user)}>\r\n                    <div className=\"chatOnlineImgContainer\">\r\n                        {o.photo ? (\r\n                            <img\r\n                                className=\"chatOnlineImg\"\r\n                                src={`/uploads/${o.photo}`}\r\n                                alt=\"...\"\r\n                            />) : (<img\r\n                                className=\"chatOnlineImg\"\r\n                                src={avatar}\r\n                                alt=\"...\"\r\n                            />)\r\n                        }\r\n                        <div className=\"chatOnlineBadgeOff\"></div>\r\n                    </div>\r\n                    <span className=\"chatOnlineName\">{o?.user.name}</span>\r\n                </div>\r\n            ))}\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nChatOnline.propTypes = {\r\n    getFriends: PropTypes.func.isRequired,\r\n    profile: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    profile: state.profile\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, { getFriends })(ChatOnline)"]},"metadata":{},"sourceType":"module"}