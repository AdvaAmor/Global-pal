{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\finalproject__adva_sapir\\\\FinalProject\\\\Global-pal\\\\client\\\\src\\\\components\\\\profiles\\\\MyGroups.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport GroupItem from '../groups/GroupItem';\nimport { getGroups } from '../../actions/group';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyGroups = ({\n  getGroups,\n  profile: {\n    profile,\n    loading\n  },\n  group: {\n    groups\n  },\n  grouploading,\n  auth\n}) => {\n  _s();\n\n  useEffect(() => {\n    getGroups();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: loading || grouploading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 42\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"sapir\",\n        children: \"groups i follow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profiles\",\n        children: groups.length > 0 ? groups.map(group => profile.followingGroups.includes(group._id) ? /*#__PURE__*/_jsxDEV(GroupItem, {\n          group: group\n        }, group._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 89\n        }, this) : null) : /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"No profiles found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MyGroups, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = MyGroups;\nMyGroups.propTypes = {\n  getGroups: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired,\n  group: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n  grouploading: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile,\n  group: state.group,\n  grouploading: state.group.loading,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  getGroups\n})(MyGroups);\n\nvar _c;\n\n$RefreshReg$(_c, \"MyGroups\");","map":{"version":3,"sources":["C:/Users/User/Desktop/finalproject__adva_sapir/FinalProject/Global-pal/client/src/components/profiles/MyGroups.js"],"names":["React","Fragment","useEffect","PropTypes","connect","Spinner","GroupItem","getGroups","MyGroups","profile","loading","group","groups","grouploading","auth","length","map","followingGroups","includes","_id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,SAAT,QAA0B,qBAA1B;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAED,EAAAA,SAAF;AAAaE,EAAAA,OAAO,EAAE;AAAEA,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAtB;AACbC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF,GADM;AACMC,EAAAA,YADN;AACmBC,EAAAA;AADnB,CAAD,KAC+B;AAAA;;AAE5CZ,EAAAA,SAAS,CAAC,MAAM;AAEZK,IAAAA,SAAS;AACZ,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACA,QAAC,QAAD;AAAA,cAAWG,OAAO,IAAIG,YAAX,gBAA0B,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAA1B,gBACP,QAAC,QAAD;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,kBACKD,MAAM,CAACG,MAAP,GAAgB,CAAhB,GACGH,MAAM,CAACI,GAAP,CAAWL,KAAK,IAAKF,OAAO,CAACQ,eAAR,CAAwBC,QAAxB,CAAiCP,KAAK,CAACQ,GAAvC,iBAA+C,QAAC,SAAD;AAA4B,UAAA,KAAK,EAAER;AAAnC,WAAiBA,KAAK,CAACQ,GAAvB;AAAA;AAAA;AAAA;AAAA,gBAA/C,GAA4F,IAAjH,CADH,gBAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AAcH,CAtBD;;GAAMX,Q;;KAAAA,Q;AAwBNA,QAAQ,CAACY,SAAT,GAAqB;AAEjBb,EAAAA,SAAS,EAAEJ,SAAS,CAACkB,IAAV,CAAeC,UAFT;AAGjBb,EAAAA,OAAO,EAAEN,SAAS,CAACoB,MAAV,CAAiBD,UAHT;AAIjBX,EAAAA,KAAK,EAACR,SAAS,CAACoB,MAAV,CAAiBD,UAJN;AAKjBR,EAAAA,IAAI,EAACX,SAAS,CAACoB,MAAV,CAAiBD,UALL;AAMjBT,EAAAA,YAAY,EAACV,SAAS,CAACoB,MAAV,CAAiBD;AANb,CAArB;;AASA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BhB,EAAAA,OAAO,EAAEgB,KAAK,CAAChB,OADe;AAE9BE,EAAAA,KAAK,EAACc,KAAK,CAACd,KAFkB;AAG9BE,EAAAA,YAAY,EAACY,KAAK,CAACd,KAAN,CAAYD,OAHK;AAI9BI,EAAAA,IAAI,EAAEW,KAAK,CAACX;AAJkB,CAAL,CAA7B;;AAOA,eAAeV,OAAO,CAACoB,eAAD,EAAkB;AAAGjB,EAAAA;AAAH,CAAlB,CAAP,CAAyCC,QAAzC,CAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../layout/Spinner';\r\nimport GroupItem from '../groups/GroupItem';\r\nimport { getGroups } from '../../actions/group';\r\n\r\nconst MyGroups = ({ getGroups, profile: { profile, loading }\r\n    ,group: { groups } ,grouploading,auth }) => {\r\n\r\n    useEffect(() => {\r\n        \r\n        getGroups();\r\n    }, []);\r\n\r\n    return(\r\n    <Fragment>{loading || grouploading ? <Spinner /> :\r\n        <Fragment>\r\n            <h1 className=\"sapir\">groups i follow</h1>\r\n            \r\n            <div className=\"profiles\">\r\n                {groups.length > 0 ? (\r\n                    groups.map(group => (profile.followingGroups.includes(group._id) ? (<GroupItem  key={group._id} group={group}/>):null\r\n                    ))\r\n                ) : <h4>No profiles found</h4>}\r\n            </div>\r\n        </Fragment>}\r\n    </Fragment>);\r\n\r\n}\r\n\r\nMyGroups.propTypes = {\r\n    \r\n    getGroups: PropTypes.func.isRequired,\r\n    profile: PropTypes.object.isRequired,\r\n    group:PropTypes.object.isRequired,\r\n    auth:PropTypes.object.isRequired,\r\n    grouploading:PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    profile: state.profile,\r\n    group:state.group,\r\n    grouploading:state.group.loading,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, {  getGroups })(MyGroups);"]},"metadata":{},"sourceType":"module"}