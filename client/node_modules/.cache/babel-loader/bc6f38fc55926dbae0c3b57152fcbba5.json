{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useEffect } from 'react';\nimport { database } from '../firebase';\nconst ACTIONS = {\n  SELECT_FOLDER: 'select-folder',\n  UPDATE_FOLDER: 'update-folder',\n  SET_CHILD_FOLDERS: 'set-child-folders',\n  SET_CHILD_FILES: 'set-child-files'\n};\nexport const ROOT_FOLDER = {\n  name: 'Root',\n  id: null,\n  path: []\n};\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case ACTIONS.SELECT_FOLDER:\n      return {\n        folderId: payload.folderId,\n        folder: payload.folder,\n        childFiles: [],\n        childFolders: []\n      };\n\n    case ACTIONS.UPDATE_FOLDER:\n      return { ...state,\n        folder: payload.folder\n      };\n\n    case ACTIONS.SET_CHILD_FOLDERS:\n      return { ...state,\n        childFolders: payload.childFolders\n      };\n\n    case ACTIONS.SET_CHILD_FILES:\n      return { ...state,\n        childFiles: payload.childFiles\n      };\n\n    default:\n      return state;\n  }\n} //adva\n\n\nexport function useFolder(folderId = null, folder = null, profile = null) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    folderId,\n    folder,\n    childFolders: [],\n    childFiles: []\n  });\n  useEffect(() => {\n    dispatch({\n      type: ACTIONS.SELECT_FOLDER,\n      payload: {\n        folderId,\n        folder\n      }\n    });\n  }, [folderId, folder]);\n  useEffect(() => {\n    if (folderId == null) {\n      return dispatch({\n        type: ACTIONS.UPDATE_FOLDER,\n        payload: {\n          folder: ROOT_FOLDER\n        }\n      });\n    }\n\n    database.folders.doc(folderId).get().then(doc => {\n      dispatch({\n        type: ACTIONS.UPDATE_FOLDER,\n        payload: {\n          folder: database.formatDoc(doc)\n        }\n      });\n      console.log(database.formatDoc(doc));\n    }).catch(() => {\n      dispatch({\n        type: ACTIONS.UPDATE_FOLDER,\n        payload: {\n          folder: ROOT_FOLDER\n        }\n      });\n    });\n  }, [folderId]);\n  useEffect(() => {\n    const cleanup = database.folders.where(\"parentId\", \"==\", folderId).where(\"userId\", \"==\", profile) //.orderBy(\"createdAt\")\n    .onSnapshot(snapshot => {\n      dispatch({\n        type: ACTIONS.SET_CHILD_FOLDERS,\n        payload: {\n          childFolders: snapshot.docs.map(database.formatDoc)\n        }\n      });\n    });\n    return () => cleanup();\n  }, [folderId, profile]);\n  useEffect(() => {\n    const cleanup = database.files.where(\"folderId\", \"==\", folderId).where(\"userId\", \"==\", profile) //.orderBy(\"createdAt\")\n    .onSnapshot(snapshot => {\n      dispatch({\n        type: ACTIONS.SET_CHILD_FILES,\n        payload: {\n          childFiles: snapshot.docs.map(database.formatDoc)\n        }\n      });\n    });\n    return () => cleanup();\n  }, [folderId, profile]);\n  return state;\n}\n\n_s(useFolder, \"94Qc8j5TRezctch69rDfvWnoDWw=\");","map":{"version":3,"sources":["C:/Users/User/Desktop/finalproject__adva_sapir/myProject/client/src/hooks/useFolder.js"],"names":["useReducer","useEffect","database","ACTIONS","SELECT_FOLDER","UPDATE_FOLDER","SET_CHILD_FOLDERS","SET_CHILD_FILES","ROOT_FOLDER","name","id","path","reducer","state","type","payload","folderId","folder","childFiles","childFolders","useFolder","profile","dispatch","folders","doc","get","then","formatDoc","console","log","catch","cleanup","where","onSnapshot","snapshot","docs","map","files"],"mappings":"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","sourcesContent":["import { useReducer,useEffect } from 'react'\r\nimport {database} from '../firebase'\r\n\r\nconst ACTIONS= {\r\n   SELECT_FOLDER:'select-folder',\r\n   UPDATE_FOLDER:'update-folder',\r\n   SET_CHILD_FOLDERS: 'set-child-folders',\r\n   SET_CHILD_FILES: 'set-child-files',\r\n}\r\n\r\nexport const ROOT_FOLDER = {name: 'Root', id:null, path:[] }\r\n\r\nfunction reducer(state,{type ,payload}){\r\nswitch(type){\r\n    case ACTIONS.SELECT_FOLDER:\r\n        return {\r\n            folderId: payload.folderId,\r\n            folder: payload.folder,\r\n            childFiles: [],\r\n            childFolders:[],\r\n        }\r\n    case ACTIONS.UPDATE_FOLDER:\r\n        return{\r\n            ...state,\r\n            folder:payload.folder\r\n        }\r\n        case ACTIONS.SET_CHILD_FOLDERS:\r\n            return{\r\n                ...state,\r\n                childFolders:payload.childFolders,\r\n            }\r\n            case ACTIONS.SET_CHILD_FILES:\r\n                return{\r\n                    ...state,\r\n                    childFiles:payload.childFiles,\r\n                }\r\n    default:\r\n        return state\r\n}\r\n}\r\n//adva\r\nexport function useFolder(folderId= null, folder=null,profile=null){\r\n    const [state,dispatch]=useReducer(reducer,{\r\n    folderId,\r\n    folder,\r\n    childFolders:[],\r\n    childFiles:[]\r\n})\r\n\r\nuseEffect(()=>{\r\n    dispatch({type:ACTIONS.SELECT_FOLDER, payload:{folderId,folder}})\r\n},[folderId,folder])\r\n\r\nuseEffect(()=>{\r\n    if (folderId == null){\r\n        return dispatch({\r\n         type:ACTIONS.UPDATE_FOLDER,\r\n         payload: {folder:ROOT_FOLDER }   \r\n        })\r\n    }\r\n    database.folders\r\n    .doc(folderId)\r\n    .get()\r\n    .then(doc =>{\r\n        dispatch({\r\n            type:ACTIONS.UPDATE_FOLDER,\r\n            payload:{folder:database.formatDoc(doc)},\r\n        })\r\n\r\n        console.log(database.formatDoc(doc))\r\n    })\r\n    .catch(()=>{\r\n        dispatch({\r\n            type:ACTIONS.UPDATE_FOLDER,\r\n            payload:{folder:ROOT_FOLDER},\r\n        })\r\n\r\n    })\r\n},[folderId])\r\nuseEffect(()=>{\r\n    const cleanup = database.folders.\r\n    where(\"parentId\",\"==\",folderId)\r\n    .where(\"userId\",\"==\",profile)\r\n    //.orderBy(\"createdAt\")\r\n    .onSnapshot(snapshot=>{\r\n        dispatch({\r\n            type:ACTIONS.SET_CHILD_FOLDERS,\r\n            payload:{childFolders:snapshot.docs.map(database.formatDoc)}\r\n            \r\n        })\r\n\r\n    })\r\n     return ()=> cleanup()\r\n},[folderId,profile])\r\n\r\nuseEffect(()=>{\r\n    const cleanup = database.files.\r\n    where(\"folderId\",\"==\",folderId)\r\n    .where(\"userId\",\"==\",profile)\r\n    //.orderBy(\"createdAt\")\r\n    .onSnapshot(snapshot=>{\r\n        dispatch({\r\n            type:ACTIONS.SET_CHILD_FILES,\r\n            payload:{childFiles:snapshot.docs.map(database.formatDoc)}\r\n            \r\n        })\r\n\r\n    })\r\n     return ()=> cleanup()\r\n},[folderId,profile])\r\n\r\n\r\nreturn state\r\n}"]},"metadata":{},"sourceType":"module"}