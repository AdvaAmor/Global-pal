{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_FRIENDS, GET_PROFILE, GET_CONVERSATION_PROFILE, GET_PROFILES, PROFILE_ERROR, CLEAR_PROFILE, ACCOUNT_DELETED, UPDATE_FOLLOWER, FOLLOWER_ERROR, GET_SEARCH_PROFILES } from './types'; //get friends of the user\n\nexport const getFriends = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    const myProfile = res.data;\n    let friends = [];\n\n    for (let i = 0; i < myProfile.followers.length; i++) {\n      const followerProfile = await axios.get(`/api/profile/user/${myProfile.followers[i]}`);\n      friends.push(followerProfile.data);\n    }\n\n    for (let i = 0; i < myProfile.following.length; i++) {\n      const followingProfile = await axios.get(`/api/profile/user/${myProfile.following[i]}`);\n      friends.push(followingProfile.data);\n    }\n\n    dispatch({\n      type: GET_FRIENDS,\n      payload: friends\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // searchProfiles\n\nexport const searchProfiles = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/profile/search', formData, config);\n    dispatch({\n      type: GET_SEARCH_PROFILES,\n      payload: res.data\n    });\n    history.push('/searchResult');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // getCurrentProfile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Create or update profile\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/profile', formData, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all profiles\n\nexport const getProfiles = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile');\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get Conversation profile by ID\n\nexport const getConversationProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/user/${userId}`);\n    dispatch({\n      type: GET_CONVERSATION_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get profile by ID\n\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/user/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //delete account & profile\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Are you sure? This can NOT be undone!')) {\n    try {\n      await axios.delete('/api/profile');\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert('Your account has been permanently deleted'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n}; //addFollower\n\nexport const addFollower = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/profile/addFollower/${id}`);\n    dispatch({\n      type: UPDATE_FOLLOWER,\n      payload: {\n        id,\n        followers: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: FOLLOWER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // removeFollower\n// removeFollower/:id\n\nexport const removeFollower = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/profile/removeFollower/${id}`);\n    dispatch({\n      type: UPDATE_FOLLOWER,\n      payload: {\n        id,\n        followers: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: FOLLOWER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/finalproject__adva_sapir/FinalProject/Global-pal/client/src/actions/profile.js"],"names":["axios","setAlert","GET_FRIENDS","GET_PROFILE","GET_CONVERSATION_PROFILE","GET_PROFILES","PROFILE_ERROR","CLEAR_PROFILE","ACCOUNT_DELETED","UPDATE_FOLLOWER","FOLLOWER_ERROR","GET_SEARCH_PROFILES","getFriends","dispatch","res","get","myProfile","data","friends","i","followers","length","followerProfile","push","following","followingProfile","type","payload","err","msg","response","statusText","status","searchProfiles","formData","history","config","headers","post","errors","forEach","error","getCurrentProfile","createProfile","edit","getProfiles","getConversationProfileById","userId","getProfileById","deleteAccount","window","confirm","delete","addFollower","id","put","removeFollower"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\n\r\n\r\nimport {\r\n  GET_FRIENDS,\r\n  GET_PROFILE,\r\n  GET_CONVERSATION_PROFILE,\r\n  GET_PROFILES,\r\n  PROFILE_ERROR,\r\n  CLEAR_PROFILE,\r\n  ACCOUNT_DELETED,\r\n  UPDATE_FOLLOWER,\r\n  FOLLOWER_ERROR,\r\n  GET_SEARCH_PROFILES\r\n\r\n} from './types';\r\n\r\n\r\n\r\n//get friends of the user\r\nexport const getFriends = () => async dispatch => {\r\n  try {\r\n    const res = await axios.get('/api/profile/me');\r\n    const myProfile = res.data;\r\n    let friends = [];\r\n    for (let i = 0; i < myProfile.followers.length; i++) {\r\n      const followerProfile = await axios.get(`/api/profile/user/${myProfile.followers[i]}`);\r\n      friends.push(followerProfile.data);\r\n    }\r\n    for (let i = 0; i < myProfile.following.length; i++) {\r\n      const followingProfile = await axios.get(`/api/profile/user/${myProfile.following[i]}`);\r\n      friends.push(followingProfile.data);\r\n    }\r\n\r\n    dispatch({\r\n      type: GET_FRIENDS,\r\n      payload: friends\r\n    });\r\n    \r\n  } catch (err) {\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n\r\n\r\n// searchProfiles\r\nexport const searchProfiles = (formData, history) => async dispatch => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type':'application/json'\r\n      }\r\n    }\r\n   \r\n    const res = await axios.post('/api/profile/search' , formData , config);\r\n    \r\n\r\n    dispatch({\r\n      type: GET_SEARCH_PROFILES,\r\n      payload: res.data\r\n    });\r\n\r\n    history.push('/searchResult');\r\n  } catch (err) {\r\n      const errors = err.response.data.errors;\r\n        if(errors){\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));  \r\n        }\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n    \r\n  }\r\n}\r\n\r\n\r\n\r\n// getCurrentProfile\r\nexport const getCurrentProfile = () => async dispatch => {\r\n    try {\r\n      const res = await axios.get('/api/profile/me');\r\n      dispatch({\r\n        type: GET_PROFILE,\r\n        payload: res.data\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PROFILE_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Create or update profile\r\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type':'application/json'\r\n      }\r\n    }\r\n    const res = await axios.post('/api/profile' , formData , config);\r\n\r\n    dispatch({\r\n      type: GET_PROFILE,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(setAlert(edit ? 'Profile Updated': 'Profile Created','success'));\r\n    history.push('/dashboard');\r\n    \r\n  } catch (err) {\r\n      const errors = err.response.data.errors;\r\n        if(errors){\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));  \r\n        }\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n    \r\n  }\r\n}\r\n\r\n// Get all profiles\r\nexport const getProfiles = () => async (dispatch) => {\r\n\r\n  try {\r\n    const res = await axios.get('/api/profile');\r\n\r\n    dispatch({\r\n      type: GET_PROFILES,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n// Get Conversation profile by ID\r\nexport const getConversationProfileById = (userId) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(`/api/profile/user/${userId}`);\r\n\r\n    dispatch({\r\n      type: GET_CONVERSATION_PROFILE,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Get profile by ID\r\nexport const getProfileById = (userId) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(`/api/profile/user/${userId}`);\r\n\r\n    dispatch({\r\n      type: GET_PROFILE,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n\r\n//delete account & profile\r\nexport const deleteAccount = () => async (dispatch) => {\r\n  if (window.confirm('Are you sure? This can NOT be undone!')) {\r\n    try {\r\n      await axios.delete('/api/profile');\r\n\r\n      dispatch({ type: CLEAR_PROFILE });\r\n      dispatch({ type: ACCOUNT_DELETED });\r\n\r\n      dispatch(setAlert('Your account has been permanently deleted'));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PROFILE_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n//addFollower\r\nexport const addFollower = id => async dispatch => {\r\n  try {\r\n    const res = await axios.put(`/api/profile/addFollower/${id}`);\r\n\r\n    dispatch({\r\n      type: UPDATE_FOLLOWER,\r\n      payload: { id, followers: res.data }\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: FOLLOWER_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// removeFollower\r\n// removeFollower/:id\r\nexport const removeFollower = id => async dispatch => {\r\n  try {\r\n    const res = await axios.put(`/api/profile/removeFollower/${id}`);\r\n\r\n    dispatch({\r\n      type: UPDATE_FOLLOWER,\r\n      payload: {id, followers: res.data }\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: FOLLOWER_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}