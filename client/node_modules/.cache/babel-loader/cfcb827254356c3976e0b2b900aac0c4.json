{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\finalproject__adva_sapir\\\\FinalProject\\\\Global-pal\\\\client\\\\src\\\\components\\\\posts\\\\Posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport PostItem from './PostItem';\nimport PostForm from './PostForm';\nimport Spinner from '../layout/Spinner';\nimport { getPosts } from '../../actions/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Posts = ({\n  groupId,\n  getPosts,\n  post: {\n    posts,\n    loading\n  },\n  owner\n}) => {\n  _s();\n\n  useEffect(() => {\n    getPosts(groupId);\n  }, [getPosts, groupId]);\n  return loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 20\n  }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PostForm, {\n      groupId: groupId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(PostItem, {\n        post: post,\n        owner: owner\n      }, post._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Posts, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Posts;\nPosts.propTypes = {\n  getPosts: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  post: state.post\n});\n\nexport default connect(mapStateToProps, {\n  getPosts\n})(Posts);\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["C:/Users/User/Desktop/finalproject__adva_sapir/FinalProject/Global-pal/client/src/components/posts/Posts.js"],"names":["React","Fragment","useEffect","PropTypes","connect","PostItem","PostForm","Spinner","getPosts","Posts","groupId","post","posts","loading","owner","map","_id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,QAAT,QAAyB,oBAAzB;;;AAGA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAUF,EAAAA,QAAV;AAAoBG,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAF;AAAQC,IAAAA;AAAR,GAA1B;AAA2CC,EAAAA;AAA3C,CAAD,KAAwD;AAAA;;AACpEZ,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,QAAQ,CAACE,OAAD,CAAR;AACD,GAFQ,EAEN,CAACF,QAAD,EAAUE,OAAV,CAFM,CAAT;AAIA,SAAOG,OAAO,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAH,gBACZ,QAAC,QAAD;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,OAAO,EAAEH;AAAnB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBACGE,KAAK,CAACG,GAAN,CAAWJ,IAAD,iBACT,QAAC,QAAD;AAAyB,QAAA,IAAI,EAAEA,IAA/B;AAAqC,QAAA,KAAK,EAAEG;AAA5C,SAAeH,IAAI,CAACK,GAApB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAfD;;GAAMP,K;;KAAAA,K;AAiBNA,KAAK,CAACQ,SAAN,GAAkB;AAChBT,EAAAA,QAAQ,EAAEL,SAAS,CAACe,IAAV,CAAeC,UADT;AAEhBR,EAAAA,IAAI,EAAER,SAAS,CAACiB,MAAV,CAAiBD;AAFP,CAAlB;;AAMA,MAAME,eAAe,GAAIC,KAAD,KAAY;AAClCX,EAAAA,IAAI,EAAEW,KAAK,CAACX;AADsB,CAAZ,CAAxB;;AAIA,eAAeP,OAAO,CAACiB,eAAD,EAAkB;AAAEb,EAAAA;AAAF,CAAlB,CAAP,CAAuCC,KAAvC,CAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport PostItem from './PostItem';\r\nimport PostForm from './PostForm';\r\nimport Spinner from '../layout/Spinner';\r\nimport { getPosts } from '../../actions/post';\r\n\r\n\r\nconst Posts = ({ groupId,getPosts, post: { posts,loading},owner }) => {\r\n  useEffect(() => {\r\n    getPosts(groupId);\r\n  }, [getPosts,groupId]);\r\n\r\n  return loading ? <Spinner/> : (\r\n    <Fragment>\r\n      <PostForm groupId={groupId}/>\r\n      <div className=\"posts\">\r\n        {posts.map((post) => (\r\n          <PostItem key={post._id} post={post} owner={owner} />\r\n        ))}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nPosts.propTypes = {\r\n  getPosts: PropTypes.func.isRequired,\r\n  post: PropTypes.object.isRequired\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  post: state.post\r\n});\r\n\r\nexport default connect(mapStateToProps, { getPosts })(Posts);"]},"metadata":{},"sourceType":"module"}